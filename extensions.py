import requests
import json
from config import values_dict, HELP


class ApiExeption(Exception):
    '''–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π'''

    def __init__(self, error_msg):
        self.error_msg = error_msg

    def errors_loging(self, userinfo, message):
        '''–ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É, –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.'''
        my_file = open("log.txt", "a+")
        my_file.write(f'{str(userinfo)}\nErrMsg: {message} \n\n')
        my_file.close()
        raise ApiExeption(self.error_msg)


class CryptoCompare:
    '''–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç.'''

    URL_API = ('https://min-api.cryptocompare.com/'
               'data/price?fsym={}&tsyms={}')

    def __init__(self, currency_out, currency_in, quantity):
        self.currency_out = currency_out
        self.currency_in = currency_in
        self.quantity = float(quantity)

    def get_url(self):
        '''–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å URL.'''
        url = (self.URL_API.format
               (self.currency_out,
                self.currency_in))
        return url

    def get_exchange(self):
        '''–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç.'''
        get_exchange = requests.get(self.get_url())
        total = (float(json.loads(get_exchange.content)
                       [self.currency_in])
                 * (self.quantity))
        return total

    def send_answer(self):
        '''–í–µ—Ä—É—Ç—å —Å—Ç—Ä–æ–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º.'''
        answer = (f'{self.quantity} {self.currency_out} '
                  f'‚û°Ô∏è {self.get_exchange():.2f} {self.currency_in}')
        return answer


class MenuCommands:
    '''–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é.'''

    def __init__(self, message):
        self.message = message

    def all_values(self):
        '''–í–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏.'''
        all_values = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:'
        for key, val in values_dict.items():
            all_values = '\n'.join((all_values, 'üíπ '
                                    + key.capitalize()
                                    + ' - ' + val))
        return all_values

    def help(self):
        return HELP


def process_message(message, userinfo):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.'''
    COMMANDS = {
            '–≤—Å–µ –≤–∞–ª—é—Ç—ã': MenuCommands(message).all_values(),
            '–ø–æ–º–æ—â—å': MenuCommands(message).help()
            }

    message = message.lower()
    message_list = list(message.split())

    if message in COMMANDS:
        crp_obj = COMMANDS[message]

    elif len(message_list) == 3:
        if message_list[0] in values_dict and message_list[1] in values_dict:
            val_in = values_dict[message_list[0]]
            val_out = values_dict[message_list[1]]
            val_num = message_list[2]
            if val_out.isnumeric():
                crp_obj = CryptoCompare(val_in, val_out, val_num).send_answer()
            else:
                crp_obj = ApiExeption('–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å‚òπÔ∏è\n'
                                      f'"{val_num}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–≤—ã–º'
                                      ' –∑–Ω–∞—á–µ–Ω–∏–µ–º.').errors_loging(userinfo,
                                                                   message)
        else:
            crp_obj = ApiExeption('–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å‚òπÔ∏è\n'
                                  '–í–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å'
                                  ' –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.\n'
                                  '–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã '
                                  '/values').errors_loging(userinfo,
                                                           message)
    else:
        crp_obj = ApiExeption('–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å‚òπÔ∏è\n'
                              f'–ö–æ–º–∞–Ω–¥–∞ "{message}" '
                              '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.').errors_loging(userinfo,
                                                              message)
    return crp_obj
